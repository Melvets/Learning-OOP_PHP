PART 1 ========================================================================================
Object Oriented Programming
    1. Definisi
        A. OOP merupakan gaya pemrograman / programming style, atau ada yang menyebutnya paradigma pemrograman.
        B. Prosedural Programing
            - Instruksi dilakukan langkah demi langkah
            - Memecah program menjadi bagian-bagian kecil
            - Disebut prosedur, subroutine atau function
            - Linear / Top-to Buttom / dari atas ke bawah
            - Bahasa pemrograman yang menggunakan gaya prosedural: 
                a) Fortran      e) C  
                b) ALGOL        f) PHP
                c) COBOL        g) Javascript
                d) Pascal
    2. Kelebihan Procedural Programing
        A. To-the-point
        B. Simplicity & kemudahan implementasi (untuk compiler & interpreter)
        C. Mudah ditelusuri (Jika ada error maka pesan kesalahannya akan langsung mentarget area kesalahannya)
        D. Membutuhkan lebih sedikit memory pada proses eksekusi (dibandingkan dengan OOP)
    3. Karakteristik Object Oriented Programing
        A. Menyusun semua kode program dan struktur data sebagai objek
        B. Objek adalah unit dasar dari program
        C. Objek menyimpan data dan perilaku
        D. Objek bisa saling berinteraksi
        E. Bahasa pemrograman yang menggunakan OOP:
            - Java          - C++
            - Ruby          - Javascript
            - Python        - PHP5 / PHP versi 5 keatas
    4. Kelebihan Object Oriented Programing (OOP)
        A. Representasi dunia nyata 
        B. Enkapsulasi & Abstraksi data (Enkapsulasi: Memungkinkan data aman, tidak dapat diakses oleh bagian lain di program | Abstraksi Data: Mudah menyembunyikan kerumitan di program, karena akan di rubah menjadi objek)
        C. Reusability (Dapat dengan mudah untuk menggunaulang bagian2 dari program)
        D. Skalabilitas & Ekstensibilitas (Memudahkan programmer ketika nantinya program akan lebih besar)
        E. Kemudahan pengelolaan
        F. Kolaborasi
        G. Digunakan oleh framework 
    5. Procedural vs Object Oriented
        Tergantung kebutuhan. Jika ingin membuat program yang simpel dapat menggunakan Procedural. Dan jika ingin membuat program dengan skala yang besar Object Oriented lebih cocok.
    6. Konsep OOP pada PHP
        A. Basic
            - Class & Objek
            - Property & Method
            - Constructor
            - Object Type
            - Inheritance
            - Visibility / Access Modifier
            - Setter & Getter
            - Static Method
        B. Advanced
            - Abstract & Interface
            - Interceptor
            - Object Cloning
            - Callbacks & Closures
            - Namespaces & Autoloading
            - ...

PART 2 ========================================================================================
Class & Object
    1. Definisi dan Cara Membuat
        A. Class
            - Definisi
                a) Class adalah template / blueprint untuk membuat instance dari sebuah Object
                b) Class mendefinisikan Object
                c) Class menyimpan data dan perilaku yang disebuh Property dan Method
            - Membuat Class
                a) Diawali dengan menuliskan keyword class, diikuti nama dan dibatasi dengan {} untuk menyimpan property dan method    
                b) Aturan penamaan class sama seperti variable
                c) Biasanya penamaan diawali huruf besar atau camel casing
                    Contoh: 
                        -----------------------------------------------------
                        class Coba {
                            public $a; -----> -property-

                            public function b () { -----> -method-

                            }

                        }
                        -----------------------------------------------------
        B. Object 
            - Definisi
                a) Instance yang didefinisikan oleh Class
                b) Banyak object dapat dibuat menggunakan satu Class
                c) Object dibuat dengan menggunakan keyword new
            - Membuat Object
                Contoh:
                        -----------------------------------------------------
                        class Coba {



                        }

                        -membuat object instance dari Class-
                        $a = new Coba();
                        $b = new Coba();
                        -----------------------------------------------------

PART 3 ========================================================================================
Property & Method  
    1. Definisi dan Penggunaannya
        A. Property 
            - Definisi
                a) Merepresentasikan data / keadaan dari sebuah object
                b) Variable yang ada di dalam object (member variable)
                c) Sama seperti variable di dalam PHP, ditambah dengan keyword Visibility (public, private, protected) di depannya
        B. Method
            - Definisi
                a) Merepresentasikan perilaku dari sebuah object
                b) Function yang ada di dalam object
                c) Sama seperti variable di dalam PHP, ditambah dengan keyword Visibility (public, private, protected) di depannya (opsional, default public)
    2. Contoh kasus (mobil)
        A. Property (data)
            - nama                  - kecepatanMaksimal
            - merk                  - jumlahPenumpang
            - warna                 - dsb.
        B. Method (perilaku)
            - tambahKecepatan       - belokKiri
            - kurangiKecepatan      - belokKanan
            - gantiTransmisi        - dsb.
        C. implementasi
            --------------------------------------------------------------------
            class Mobil {
                public $nama,
                public $merk,
                public $warna,
                public $kecepatanMaksimal,
                public $jumlahPenumpang;

                public function tambahKecepatan() {

                }

                public function kurangiKecepatan() {

                }

                public function gantiTransmisi() {

                }
            }
            --------------------------------------------------------------------

PART 4 ========================================================================================
Constructor
    A. Definisi
        Sebuah method yang spesial atau method yang khusus ada di dalam Class. Disebut spesial karena Constructor adalah method yang otomatis dijalankan ketika sebuah Class di instansiasi / dibuat objectnya. 
        Bahasa gampangnya membuat program lebih ringkas.
    B. Contoh
        --------------------------------------------------------------------
        class Produk {
            public $judul, 
                $penulis,
                $penerbit,
                $harga;

            // Menggunakan:
            public function __construct( $judul = "kosong", $penulis = "kosong", $penerbit = "kosong", $harga = "kosong" ) {
                $this->judul = $judul;
                $this->penulis = $penulis;
                $this->penerbit = $penerbit;
                $this->harga = $harga;
            }

            public function getLabel() {
                return "$this->penulis, $this->penerbit";
            }
        }    

        // Construcktor-nya
        $produk1 = new Produk("Naruto", "Masashi Kishimoto", "Shonen Jump", 30000);
        $produk2 = new Produk("Guru Aini", "Andrea Hirata", "Bentang Pustaka", 100000);
        $produk3 = new Produk();

        echo "Komik : " . $produk1->getLabel();
        echo "<br>";
        echo "Novel : " . $produk2->getLabel();
        echo "<br>";
        echo "Novel : " . $produk3->getLabel();
        --------------------------------------------------------------------

PART 5 ========================================================================================
Object Type
    1. Menghubungkan method dengan class lain dan memasukkan property dalam suatu method

PART 6 ========================================================================================   
Inheritance
    1. Definisi
        A. Menciptakan hierarki antar kelas (Parent & Child)
        B. Child Class, mewarisi semua properti dan method dari parent-nya (yang visible) 
        C. Child Class, memperluas (extends) fungsionalitas dari parent-nya 
    2. implementasi    
        --------------------------------------------------------------------
        class Mobil {
            public $nama, $merk, $warna,
                   $kecepatanMaksimal,
                   $jumlahPenumpang;

            public function tambahKecepatan() {
                return "Kecepatan bertambah!";
            }       
        }

        // Child
        class MobilSport extends Mobil {
            public $turbo = false;

            public function jalankanTurbo(){
                $this->turbo = true;
                return "Turbo dijalankan";
            }
        }

        $mobil = new MobilSport();
        echo $mobil->tambahKecepatan();
        echo "<br>";
        echo $mobil->jalankanTurbo();
        --------------------------------------------------------------------

PART 7 ========================================================================================   
Overriding
    1. Definisi
        Overriding adalah sebuah istilah dimana bisa membuat method di kelas child yang memiliki nama yang sama dengan nama parentnya istilahnya Overriding mengambil alih/menimpa method parentnya. 
    2. Contohnya
        parent::getInfoProduk()

        Contoh Overriding ke-2
        public function __construct( $judul = "kosong", $penulis = "kosong", $penerbit = "kosong", $harga = "kosong", $jam = "kosong" ) {
    
        parent::__construct( $judul, $penulis, $penerbit, $harga );

        $this->jam = $jam;
    
    }

PART 8 ========================================================================================   
Visibility (Access Modifier)
    1. Definisi
        A. Konsep yang digunakan untuk mengatur akses dari property dan method pada sebuah objek
        B. Ada 3 keyword Visibility: public, protected, dan private
            - public, dapat digunakan di mana saja, bahkan di luar kelas
            - protected, hanya dapat digunakan di dalam sebuah kelas beserta turunannya (Jika punya kelas yang ada Inheritance maka kedua kelas tersebut bisa menggunakan properti atau method dengan menggunakan Visibility Protected)
            - private, hanya dapat digunakan di dalam sebuah kelas tertentu saja
    2. Fungsi Visibility
        A. Hanya memperlihatkan aspek dari class yang dibutuhkan oleh 'client'
        B. Menentukan kebutuhan yang jelas untuk object
        C. Memberikan kendali pada kode untuk menghindari 'bug'
    3. Contoh implementasi Visibility:
        A. Publik
            Dapat digunakan / dipanggil dimana saja
             --------------------------------------------------------------------
             class Coba {
                public $coba1;
             }

             $panggil = new Coba();
             --------------------------------------------------------------------

        B. Protected
            Dapat digunakan oleh class itu sendiri dan turunannya / childnya
             --------------------------------------------------------------------
             class Coba {
                public $coba1;
                protected $anakcoba1;
             }       

             class Anak1 extends Coba {
                public function getProtected() {
                    return $this->$anakcoba1 = 30; //bisa
                }
             }

             $panggil = new Anak1(); 

             echo $panggil->anakcoba1; //tidak bisa
             echo $panggil->getProtected(); //bisa
             --------------------------------------------------------------------

        C. Private
            Dapat digunakan pada class itu sendiri
             --------------------------------------------------------------------
             class Coba {
                public $coba1;
                protected $anakcoba1;
                private $anakcoba2;

                public function getPrivate() {
                    return $this->$anakcoba2 = 30; //bisa
                }                
             }       

             class Anak1 extends Coba {
                public function getProtected() {
                    return $this->$anakcoba1 = 30; // bisa
                }
                public function getPrivategbs() {
                    return $this->anakcoba2 = 30; //tidak bisa
                }
             }

             $panggil = new Anak1(); 

             echo $panggil->anakcoba1; //tidak bisa
             echo $panggil->getProtected(); //bisa
             echo $panggil->getPrivate(); //bisa
             --------------------------------------------------------------------

PART 9 ========================================================================================
Setter dan Getter (Accessor Method)
    1. Definisi
        Setter dan Getter adalah method yang bisa membaca atau melihat isi property ataupun mengubah isinya. Method untuk mengeset dan method untuk mengeget.
            --------------------------------------------------------------------
            public function setPenulis ( $penulis ) {
                $this->penulis = $penulis;
            }

            public function getPenulis() {
                return $this->penulis;
            }

            public function setPenerbit ( $penerbit ) {
                $this->penerbit = $penerbit;
            }

            public function getPenerbit() {
                return $this->penerbit;
            }

            //Memanggil
            // setter dan getter
            $produk1->setHarga(20000);
            echo $produk1->getJudul();
            echo $produk1->getPenulis();
            echo $produk1->getPenerbit();
            echo $produk1->getHarga();
            --------------------------------------------------------------------

PART 10 ========================================================================================
Static Keyword
    1. Definisi
        Static keyword dapat memanggil properti dan method tanpa meng-instansiasi class terlebih dahulu. 
    2. Cara penggunaannya

        <class>::$<property>;
        <class>::<method>();

        Contoh:
            --------------------------------------------------------------------
            class ContohStatic {
                //property 
                public static $angka = 1;

                //method
                public static function halo() {
                    return "Halo.";
                }
            }

            //pemanggilan property
            echo ContohStatic::$angka;

            //pemanggilan method
            echo ContohStatic::halo();
            --------------------------------------------------------------------

            Untuk menampilkan "Halo1" tanpa/menggunakan instansiasi menggunakan "$this->angka;" tetapi jika menggunakan static menggunakan "self::$angka;"

            --------------------------------------------------------------------
            class ContohStatic {
                //property 
                public static $angka = 1;

                //method
                public static function halo() {
                    return "Halo " . self::$angka++ . " kali.";
                }
            }

            echo ContohStatic::$angka;
            echo ContohStatic::halo();
            echo ContohStatic::halo();
            ====================================================================
            hasil:
            1
            Halo 1 kali.
            Halo 2 kali.
            --------------------------------------------------------------------

    3. Digunakan untuk apa saja
        A. Member yang terikat dengan class, bukan dengan object
        B. Nilai static akan selalu tetap meskipun object di-instansiasi berulang kali
            contoh tanpa static: 
                --------------------------------------------------------------------
                class contoh {
                    public $angka = 1;

                    public function halo() {
                        return "Halo " . $this->angka++ . " kali <br>";
                    }
                }

                $obj = new Contoh;
                echo $obj->halo();
                echo $obj->halo();
                echo $obj->halo();

                echo "<hr>";

                $obj2 = new Contoh;
                echo $obj2->halo();
                echo $obj2->halo();
                echo $obj2->halo();
                ====================================================================
                hasil:
                -- Halo 1 kali
                -- Halo 2 kali
                -- Halo 3 kali

                -- Halo 1 kali
                -- Halo 2 kali
                -- Halo 3 kali
                --------------------------------------------------------------------
                
            contoh property menggunakan static: 
                --------------------------------------------------------------------
                class contoh {
                    public static $angka = 1;

                    public function halo() {
                        return "Halo " . self::$angka++ . " kali <br>";
                    }
                }

                $obj = new Contoh;
                echo $obj->halo();
                echo $obj->halo();
                echo $obj->halo();

                echo "<hr>";

                $obj2 = new Contoh;
                echo $obj2->halo();
                echo $obj2->halo();
                echo $obj2->halo();
                ====================================================================
                hasil:
                -- Halo 1 kali
                -- Halo 2 kali
                -- Halo 3 kali

                -- Halo 4 kali
                -- Halo 5 kali
                -- Halo 6 kali
                --------------------------------------------------------------------

        C. Membuat kode seolah-olah menjadi 'Procedural' karena bisa dipanggil tanpa class instansiasi
        D. Biasa' digunakan untuk membuat fungsi bantuan / helper
        E. Atau digunakan di class-class utility pada Framework
